"use strict";(self.webpackChunk_okp4_docs=self.webpackChunk_okp4_docs||[]).push([[19216],{3905:function(t,e,n){n.d(e,{Zo:function(){return s},kt:function(){return m}});var o=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function u(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var a=o.createContext({}),c=function(t){var e=o.useContext(a),n=e;return t&&(n="function"==typeof t?t(e):u(u({},e),t)),n},s=function(t){var e=c(t.components);return o.createElement(a.Provider,{value:e},t.children)},l={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,a=t.parentName,s=p(t,["components","mdxType","originalType","parentName"]),d=c(n),m=r,y=d["".concat(a,".").concat(m)]||d[m]||l[m]||i;return n?o.createElement(y,u(u({ref:e},s),{},{components:n})):o.createElement(y,u({ref:e},s))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,u=new Array(i);u[0]=d;var p={};for(var a in e)hasOwnProperty.call(e,a)&&(p[a]=e[a]);p.originalType=t,p.mdxType="string"==typeof t?t:r,u[1]=p;for(var c=2;c<i;c++)u[c]=n[c];return o.createElement.apply(null,u)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},609:function(t,e,n){n.r(e),n.d(e,{assets:function(){return s},contentTitle:function(){return a},default:function(){return m},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return l}});var o=n(87462),r=n(63366),i=(n(67294),n(3905)),u=["components"],p={},a=void 0,c={unversionedId:"okp4d_query_distribution_community-pool",id:"okp4d_query_distribution_community-pool",title:"okp4d_query_distribution_community-pool",description:"okp4d query distribution community-pool",source:"@site/commands/okp4d_query_distribution_community-pool.md",sourceDirName:".",slug:"/okp4d_query_distribution_community-pool",permalink:"/commands/next/okp4d_query_distribution_community-pool",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"okp4d_query_distribution_commission",permalink:"/commands/next/okp4d_query_distribution_commission"},next:{title:"okp4d_query_distribution_params",permalink:"/commands/next/okp4d_query_distribution_params"}},s={},l=[{value:"okp4d query distribution community-pool",id:"okp4d-query-distribution-community-pool",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}],d={toc:l};function m(t){var e=t.components,n=(0,r.Z)(t,u);return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"okp4d-query-distribution-community-pool"},"okp4d query distribution community-pool"),(0,i.kt)("p",null,"Query the amount of coins in the community pool"),(0,i.kt)("h3",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"Query all coins in the community pool which is under Governance control."),(0,i.kt)("p",null,"Example:\n$ okp4d query distribution community-pool"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"okp4d query distribution community-pool [flags]\n")),(0,i.kt)("h3",{id:"options"},"Options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'      --grpc-addr string   the gRPC endpoint to use for this chain\n      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS\n      --height int         Use a specific height to query state at (this can error if the node is pruning state)\n  -h, --help               help for community-pool\n      --node string        &lt;host&gt;:&lt;port&gt; to Tendermint RPC interface for this chain (default "tcp://localhost:26657")\n  -o, --output string      Output format (text|json) (default "text")\n')),(0,i.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'      --chain-id string   The network chain ID (default "okp4d")\n')),(0,i.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/commands/next/okp4d_query_distribution"},"okp4d query distribution"),"\t - Querying commands for the distribution module")))}m.isMDXComponent=!0}}]);