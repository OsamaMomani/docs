"use strict";(self.webpackChunk_okp4_docs=self.webpackChunk_okp4_docs||[]).push([[12409],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>f});var n=i(67294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(i),f=r,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||a;return i?n.createElement(d,o(o({ref:t},c),{},{components:i})):n.createElement(d,o({ref:t},c))}));function f(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=i[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},53400:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=i(87462),r=(i(67294),i(3905));const a={},o="Untitled undefined type in okp4-cognitarium Schema",l={unversionedId:"okp4-cognitarium-instantiatemsg-definitions-storelimitsinput-properties-max_triple_byte_size",id:"version-v2.1.0/okp4-cognitarium-instantiatemsg-definitions-storelimitsinput-properties-max_triple_byte_size",title:"Untitled undefined type in okp4-cognitarium Schema",description:"The maximum number of bytes the store can contains for a single triple. The size of a triple is counted as the sum of the size of its subject, predicate and object, including the size of data types and language tags if any. The limit is used to prevent storing very large triples, especially literals. Default to \\[Uint128::MAX] if not set, which can be considered as no limit.",source:"@site/contracts_versioned_docs/version-v2.1.0/okp4-cognitarium-instantiatemsg-definitions-storelimitsinput-properties-max_triple_byte_size.md",sourceDirName:".",slug:"/okp4-cognitarium-instantiatemsg-definitions-storelimitsinput-properties-max_triple_byte_size",permalink:"/contracts/okp4-cognitarium-instantiatemsg-definitions-storelimitsinput-properties-max_triple_byte_size",draft:!1,tags:[],version:"v2.1.0",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Untitled undefined type in okp4-cognitarium Schema",permalink:"/contracts/okp4-cognitarium-instantiatemsg-definitions-storelimitsinput-properties-max_triple_byte_size-allof-0"},next:{title:"Untitled undefined type in okp4-cognitarium Schema",permalink:"/contracts/okp4-cognitarium-instantiatemsg-definitions-storelimitsinput-properties-max_triple_count-allof-0"}},s={},p=[{value:"max_triple_byte_size Type",id:"max_triple_byte_size-type",level:2},{value:"max_triple_byte_size Default Value",id:"max_triple_byte_size-default-value",level:2}],c={toc:p};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"untitled-undefined-type-in-okp4-cognitarium-schema"},"Untitled undefined type in okp4-cognitarium Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-txt"},"undefined#/instantiate/definitions/StoreLimitsInput/properties/max_triple_byte_size\n")),(0,r.kt)("p",null,"The maximum number of bytes the store can contains for a single triple. The size of a triple is counted as the sum of the size of its subject, predicate and object, including the size of data types and language tags if any. The limit is used to prevent storing very large triples, especially literals. Default to ","[","Uint128::MAX] if not set, which can be considered as no limit."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Abstract"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Extensible"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Identifiable"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Custom Properties"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Additional Properties"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Access Restrictions"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Defined In"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Can be instantiated"),(0,r.kt)("td",{parentName:"tr",align:"left"},"No"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Unknown status"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Unknown identifiability"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Forbidden"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Allowed"),(0,r.kt)("td",{parentName:"tr",align:"left"},"none"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{target:"_blank",href:i(62804).Z,title:"open original schema"},"okp4-cognitarium.json*"))))),(0,r.kt)("h2",{id:"max_triple_byte_size-type"},"max","_","triple","_","byte","_","size Type"),(0,r.kt)("p",null,"merged type (",(0,r.kt)("a",{parentName:"p",href:"/contracts/okp4-cognitarium-instantiatemsg-definitions-storelimitsinput-properties-max_triple_byte_size"},"Details"),")"),(0,r.kt)("p",null,"all of"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/contracts/okp4-cognitarium-instantiatemsg-definitions-storelimitsinput-properties-max_triple_byte_size-allof-0",title:"check type definition"},"Untitled undefined type in okp4-cognitarium"))),(0,r.kt)("h2",{id:"max_triple_byte_size-default-value"},"max","_","triple","_","byte","_","size Default Value"),(0,r.kt)("p",null,"The default value is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"340282366920938463463374607431768211455"\n')))}m.isMDXComponent=!0},62804:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/files/okp4-cognitarium-34f8dee3f448cb3f845117fb3974c24b.json"}}]);